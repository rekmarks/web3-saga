{"version":3,"sources":["../../src/reducers/contracts.js"],"names":["initialState","types","Object","values","defaultContracts","reduce","acc","c","id","bytecode","NAMESPACE","name","contractName","artifact","errors","isDeploying","instances","sagas","ACTIONS","BEGIN_DEPLOYMENT","deploySaga","_test","actions","getClearErrorsAction","getBeginDeploymentAction","getDeploymentFailureAction","getDeploymentSuccessAction","watchDeploySaga","fn","deployContract","prepareForDeployment","reducer","state","action","type","END_DEPLOYMENT","DEPLOYMENT_SUCCESS","data","DEPLOYMENT_FAILURE","concat","error","CLEAR_ERRORS","contractId","constructorParams","web3","selectors","contracts","ready","result","Error","provider","account","contractTypes","arrayParams","Array","isArray","keys","sort","a","b","paramOrder","map","key","value","instance","address","networkId"],"mappings":";;;;;;;;;;AAGA;;AAEA;;AACA;;AAEA;;AAUA;;AAEA;;AAKA;;;;AAxBA;AAeA;AAMA;AACA;AACA;AAGA;AAEA,MAAMA,YAAY,GAAG;AAEnBC,EAAAA,KAAK,EAAEC,MAAM,CAACC,MAAP,CAAcC,mBAAd,EAAgCC,MAAhC,CAAuC,CAACC,GAAD,EAAMC,CAAN,KAAY;AACxD,UAAMC,EAAE,GAAG,iBAAOD,CAAC,CAACE,QAAT,EAAmBC,gBAAnB,CAAX;AACAJ,IAAAA,GAAG,CAACE,EAAD,CAAH,GAAU;AACRA,MAAAA,EAAE,EAAEA,EADI;AAERG,MAAAA,IAAI,EAAEJ,CAAC,CAACK,YAFA;AAGRC,MAAAA,QAAQ,EAAEN,CAHF,CAGK;;AAHL,KAAV;AAKA,WAAOD,GAAP;AACD,GARM,EAQJ,EARI,CAFY;AAYnB;AACAQ,EAAAA,MAAM,EAAE,EAbW;AAenB;AACAC,EAAAA,WAAW,EAAE,KAhBM;AAkBnB;AACAC,EAAAA,SAAS,EAAE,CACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXS,GAnBQ,CAiCnB;AACA;AACA;AAEA;AACA;AACA;;AAvCmB,CAArB;;AA0CA,MAAMC,KAAK,GAAG,CACb,0BAAYC,mBAAQC,gBAApB,EAAsCC,UAAtC,CADa,CAAd;;AAIA,MAAMC,KAAK,GAAG;AACZC,EAAAA,OAAO,EAAE;AACPC,IAAAA,oBADO;AAEPC,IAAAA,wBAFO;AAGPC,IAAAA,0BAHO;AAIPC,IAAAA;AAJO,GADG;AAOZT,EAAAA,KAAK,EAAE;AACLG,IAAAA,UADK;AAELO,IAAAA;AAFK,GAPK;AAWZC,EAAAA,EAAE,EAAE;AACFC,IAAAA,cADE;AAEFC,IAAAA;AAFE;AAXQ,CAAd;;;AAyBe,SAASC,OAAT,CAAkBC,KAAK,GAAGhC,YAA1B,EAAwCiC,MAAxC,EAAgD;AAE7D,UAAQA,MAAM,CAACC,IAAf;AAEE,SAAKhB,mBAAQC,gBAAb;AACE,aAAO,EACL,GAAGa,KADE;AAELjB,QAAAA,WAAW,EAAE;AAFR,OAAP;;AAKF,SAAKG,mBAAQiB,cAAb;AACE,aAAO,EACL,GAAGH,KADE;AAELjB,QAAAA,WAAW,EAAE;AAFR,OAAP;;AAKF,SAAKG,mBAAQkB,kBAAb;AAEE,aAAO,EACL,GAAGJ,KADE;AAGLhB,QAAAA,SAAS,EAAE,EACT,GAAGgB,KAAK,CAAChB,SADA;AAGT,WAACiB,MAAM,CAACzB,EAAR,GAAa,EACX,GAAGyB,MAAM,CAACI,IADC;AAEX7B,YAAAA,EAAE,EAAEyB,MAAM,CAACzB,EAFA,CAGX;;AAHW;AAHJ,SAHN;AAYLO,QAAAA,WAAW,EAAE;AAZR,OAAP;;AAeF,SAAKG,mBAAQoB,kBAAb;AACE,aAAO,EACL,GAAGN,KADE;AAELlB,QAAAA,MAAM,EAAEkB,KAAK,CAAClB,MAAN,CAAayB,MAAb,CAAoBN,MAAM,CAACO,KAA3B,CAFH;AAGLzB,QAAAA,WAAW,EAAE;AAHR,OAAP;;AAMF,SAAKG,mBAAQuB,YAAb;AACE,aAAO,EACL,GAAGT,KADE;AAELlB,QAAAA,MAAM,EAAE;AAFH,OAAP;;AAKF;AACE,aAAOkB,KAAP;AA7CJ;AA+CD;AAED;;;;AAIA;;;;;;;;AAMA,SAASR,wBAAT,CAAmCkB,UAAnC,EAA+CC,iBAA/C,EAAkE;AAChE,SAAO;AACLT,IAAAA,IAAI,EAAEhB,mBAAQC,gBADT;AAELuB,IAAAA,UAFK;AAGLC,IAAAA;AAHK,GAAP;AAKD;;AAED,SAASjB,0BAAT,CAAqClB,EAArC,EAAyC6B,IAAzC,EAA+C;AAC7C,SAAO;AACLH,IAAAA,IAAI,EAAEhB,mBAAQkB,kBADT;AAEL5B,IAAAA,EAFK;AAGL6B,IAAAA;AAHK,GAAP;AAKD;;AAED,SAASZ,0BAAT,CAAqCe,KAArC,EAA4C;AAC1C,SAAO;AACLN,IAAAA,IAAI,EAAEhB,mBAAQoB,kBADT;AAELE,IAAAA;AAFK,GAAP;AAID;;AAED,SAASjB,oBAAT,GAAiC;AAC/B,SAAO;AACLW,IAAAA,IAAI,EAAEhB,mBAAQuB;AADT,GAAP;AAGD;AAED;;;;AAIA;;;;;AAGA,UAAWd,eAAX,GAA8B;AAC5B,QAAM,0BAAYT,mBAAQC,gBAApB,EAAsCC,UAAtC,CAAN;AACD;AAED;;;;;;;AAKA,UAAWA,UAAX,CAAuBa,MAAvB,EAA+B;AAE7B;AACA,QAAMW,IAAI,GAAG,MAAM,qBAAOC,mBAAUD,IAAjB,CAAnB;AACA,QAAME,SAAS,GAAG,MAAM,qBAAOD,mBAAUC,SAAjB,CAAxB;AAEA,MAAIC,KAAK,GAAG,KAAZ;;AACA,MAAI;AAAEA,IAAAA,KAAK,GAAGjB,oBAAoB,CAACc,IAAD,CAA5B;AAAoC,GAA1C,CAA2C,OAAOJ,KAAP,EAAc;AACvD,UAAM,kBAAIf,0BAA0B,CAACe,KAAD,CAA9B,CAAN;AACD;;AAED,MAAIO,KAAJ,EAAW;AACT,QAAI;AACF,YAAMC,MAAM,GAAG,MAAM,mBACnBnB,cADmB,EAEnBe,IAFmB,EAGnBE,SAAS,CAAC7C,KAHS,EAInBgC,MAAM,CAACS,UAJY,EAKnBT,MAAM,CAACU,iBALY,CAArB;AAOA,YAAM,kBAAIjB,0BAA0B,CAAC,iBAAD,EAAWsB,MAAX,CAA9B,CAAN;AACD,KATD,CASE,OAAOR,KAAP,EAAc;AACd,YAAM,kBAAIf,0BAA0B,CAACe,KAAD,CAA9B,CAAN;AACD;AACF;AACF;AAED;;;;AAIA;;;;;;;;;AAOA,SAASV,oBAAT,CAA+Bc,IAA/B,EAAqC;AAEnC,MAAI,CAACA,IAAI,CAACG,KAAV,EAAiB;AACf,UAAM,IAAIE,KAAJ,CAAU,2BAAV,CAAN;AACD;;AACD,MAAI,CAACL,IAAI,CAACM,QAAV,EAAoB;AAClB,UAAM,IAAID,KAAJ,CAAU,wBAAV,CAAN;AACD;;AACD,MAAI,CAACL,IAAI,CAACO,OAAV,EAAmB;AACjB,UAAM,IAAIF,KAAJ,CAAU,uBAAV,CAAN;AACD;;AACD,SAAO,IAAP;AACD;AAED;;;;;;;;;;;;;AAWA,eAAepB,cAAf,CACIe,IADJ,EAEIQ,aAFJ,EAGIV,UAHJ,EAIIC,iBAJJ,EAKI;AAEF;AACA,MAAI,CAACS,aAAa,CAACV,UAAD,CAAlB,EAAgC;AAC9B,UAAM,IAAIO,KAAJ,CAAU,0BAA0BP,UAA1B,GAAuC,UAAjD,CAAN;AACD,GALC,CAOF;AACA;AACA;;;AACA,MAAIW,WAAW,GAAG,EAAlB;;AACA,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcZ,iBAAd,CAAL,EAAuC;AACrC;AACAU,IAAAA,WAAW,GAAGnD,MAAM,CAACsD,IAAP,CAAYb,iBAAZ,EACXc,IADW,CACN,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACd,aAAOhB,iBAAiB,CAACe,CAAD,CAAjB,CAAqBE,UAArB,GACAjB,iBAAiB,CAACgB,CAAD,CAAjB,CAAqBC,UAD5B;AAED,KAJW,EAKXC,GALW,CAKPC,GAAG,IAAInB,iBAAiB,CAACmB,GAAD,CAAjB,CAAuBC,KALvB,CAAd;AAMD,GARD,MAQO;AACLV,IAAAA,WAAW,GAAGV,iBAAd;AACD;;AAED,QAAM9B,QAAQ,GAAGuC,aAAa,CAACV,UAAD,CAAb,CAA0B7B,QAA3C,CAvBE,CAyBF;AACA;;AACA,QAAMmD,QAAQ,GAAG,MAAM,sBACrBnD,QADqB,EAErBwC,WAFqB,EAGrBT,IAAI,CAACM,QAHgB,EAIrBN,IAAI,CAACO,OAJgB,CAAvB,CA3BE,CAkCF;;AACA,SAAO;AACLa,IAAAA,QAAQ,EAAEA,QADL;AAELC,IAAAA,OAAO,EAAED,QAAQ,CAACC,OAFb;AAGLd,IAAAA,OAAO,EAAEP,IAAI,CAACO,OAHT;AAILjB,IAAAA,IAAI,EAAErB,QAAQ,CAACD,YAJV;AAKL+B,IAAAA,iBAAiB,EAAEA,iBALd;AAMLuB,IAAAA,SAAS,EAAEtB,IAAI,CAACsB;AANX,GAAP;AAQD","sourcesContent":["\n// package imports\n\nimport { put, takeLeading, call, select } from 'redux-saga/effects'\n\nimport uuidv4 from 'uuid/v4'\nimport uuidv5 from 'uuid/v5'\n\nimport {\n  contracts as defaultContracts, // all default contracts come from chain-end\n  deploy as _deploy,\n  // v2.0\n  // getInstance,\n  // callInstance,\n} from 'chain-end'\n\n// local imports\n\nimport { contracts as ACTIONS } from '../actions'\n\nimport selectors from '../selectors'\n\n// contract type uuids are created using the contract bytecode (see call below)\n// think of the resulting uuid as a hash of the contract artifact to help\n// prevent the addition of duplicate contracts\nimport { NAMESPACE } from '../utils'\n\n// import { getDisplayAddress } from '../utils' // eth address truncation\n\nconst initialState = {\n\n  types: Object.values(defaultContracts).reduce((acc, c) => {\n    const id = uuidv5(c.bytecode, NAMESPACE)\n    acc[id] = {\n      id: id,\n      name: c.contractName,\n      artifact: c, // Truffle compilation output\n    }\n    return acc\n  }, {}),\n\n  // error storage\n  errors: [],\n\n  // prevents further web3 calls if false\n  isDeploying: false,\n\n  // deployed contract instances\n  instances: {\n    // id: {\n    //   id,\n    //   truffleContract,\n    //   address,\n    //   account,\n    //   type,\n    //   constructorParams,\n    //   networkId,\n    //   dappTemplateIds,\n    //   templateNodeId,\n    // }\n  },\n\n  // v2.0\n  // // contract instance call storage\n  // callHistory: [],\n\n  // v3.0\n  // // used when deploying dapps\n  // deploymentQueue: null,\n}\n\nconst sagas = [\n takeLeading(ACTIONS.BEGIN_DEPLOYMENT, deploySaga),\n]\n\nconst _test = {\n  actions: {\n    getClearErrorsAction,\n    getBeginDeploymentAction,\n    getDeploymentFailureAction,\n    getDeploymentSuccessAction,\n  },\n  sagas: {\n    deploySaga,\n    watchDeploySaga,\n  },\n  fn: {\n    deployContract,\n    prepareForDeployment,\n  },\n}\n\nexport {\n  getBeginDeploymentAction as deployContract,\n  getClearErrorsAction as clearErrors,\n  initialState,\n  sagas,\n  _test,\n}\n\nexport default function reducer (state = initialState, action) {\n\n  switch (action.type) {\n\n    case ACTIONS.BEGIN_DEPLOYMENT:\n      return {\n        ...state,\n        isDeploying: true,\n      }\n\n    case ACTIONS.END_DEPLOYMENT:\n      return {\n        ...state,\n        isDeploying: false,\n      }\n\n    case ACTIONS.DEPLOYMENT_SUCCESS:\n\n      return {\n        ...state,\n\n        instances: {\n          ...state.instances,\n\n          [action.id]: {\n            ...action.data,\n            id: action.id,\n            // dappTemplateIds: action.data.dappTemplateIds || [],\n          },\n        },\n        isDeploying: false,\n      }\n\n    case ACTIONS.DEPLOYMENT_FAILURE:\n      return {\n        ...state,\n        errors: state.errors.concat(action.error),\n        isDeploying: false,\n      }\n\n    case ACTIONS.CLEAR_ERRORS:\n      return {\n        ...state,\n        errors: [],\n      }\n\n    default:\n      return state\n  }\n}\n\n/**\n * Synchronous action creators\n */\n\n/**\n * Initializes contract deployment.\n * @param {string} contractId the uuid of the contract to deploy\n * @param {array} constructorParams the parameters, in the order they must be\n * passed to the constructor, or an object\n */\nfunction getBeginDeploymentAction (contractId, constructorParams) {\n  return {\n    type: ACTIONS.BEGIN_DEPLOYMENT,\n    contractId,\n    constructorParams,\n  }\n}\n\nfunction getDeploymentSuccessAction (id, data) {\n  return {\n    type: ACTIONS.DEPLOYMENT_SUCCESS,\n    id,\n    data,\n  }\n}\n\nfunction getDeploymentFailureAction (error) {\n  return {\n    type: ACTIONS.DEPLOYMENT_FAILURE,\n    error,\n  }\n}\n\nfunction getClearErrorsAction () {\n  return {\n    type: ACTIONS.CLEAR_ERRORS,\n  }\n}\n\n/**\n * Sagas\n */\n\n/**\n * Watcher for deploySaga.\n */\nfunction * watchDeploySaga () {\n  yield takeLeading(ACTIONS.BEGIN_DEPLOYMENT, deploySaga)\n}\n\n/**\n * Attempts to deploy the given contract by calling its constructor with the\n * given parameters. Handles success and failure.\n * @param {object} action the action initializing the deployment procedure\n */\nfunction * deploySaga (action) {\n\n  // get necessary substate\n  const web3 = yield select(selectors.web3)\n  const contracts = yield select(selectors.contracts)\n\n  let ready = false\n  try { ready = prepareForDeployment(web3) } catch (error) {\n    yield put(getDeploymentFailureAction(error))\n  }\n\n  if (ready) {\n    try {\n      const result = yield call(\n        deployContract,\n        web3,\n        contracts.types,\n        action.contractId,\n        action.constructorParams\n      )\n      yield put(getDeploymentSuccessAction(uuidv4(), result))\n    } catch (error) {\n      yield put(getDeploymentFailureAction(error))\n    }\n  }\n}\n\n/**\n * Internal helpers\n */\n\n/**\n * Validates pre-deployment state. Throws error if validation fails.\n * Returns true otherwise.\n *\n * @param {object} web3 redux web3 substate\n * @return {bool} true if validation successful, else throws\n */\nfunction prepareForDeployment (web3) {\n\n  if (!web3.ready) {\n    throw new Error('Reducer \"web3\" not ready.')\n  }\n  if (!web3.provider) {\n    throw new Error('Missing web3 provider.')\n  }\n  if (!web3.account) {\n    throw new Error('Missing web3 account.')\n  }\n  return true\n}\n\n/**\n * Helper performing actual deployment work.\n * Validates that the contract's artifact exists and that the web3 call is\n * successful.\n *\n * @param {object} web3 redux web3 substate\n * @param {object} contractTypes contract types from state\n * @param {string} contractId name of contract to deploy\n * @param {array} constructorParams constructor parameters\n * @return {object} deployment data if successful, throws otherwise\n */\nasync function deployContract (\n    web3,\n    contractTypes,\n    contractId,\n    constructorParams,\n  ) {\n\n  // validation\n  if (!contractTypes[contractId]) {\n    throw new Error('No contract with id \"' + contractId + '\" found.')\n  }\n\n  // TODO: actually expect only arrays for this argument\n  // and move this conversion higher up the call chain\n  // (do form an object as below in the React component)\n  let arrayParams = []\n  if (!Array.isArray(constructorParams)) {\n    // convert object of params with data to array of param values\n    arrayParams = Object.keys(constructorParams)\n      .sort((a, b) => {\n        return constructorParams[a].paramOrder -\n               constructorParams[b].paramOrder\n      })\n      .map(key => constructorParams[key].value)\n  } else {\n    arrayParams = constructorParams\n  }\n\n  const artifact = contractTypes[contractId].artifact\n\n  // actual web3 call happens in here\n  // this may throw and that's fine\n  const instance = await _deploy(\n    artifact,\n    arrayParams,\n    web3.provider,\n    web3.account\n  )\n\n  // success, return deployment data\n  return {\n    instance: instance,\n    address: instance.address,\n    account: web3.account,\n    type: artifact.contractName,\n    constructorParams: constructorParams,\n    networkId: web3.networkId,\n  }\n}\n"],"file":"contracts.js"}