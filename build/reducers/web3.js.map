{"version":3,"sources":["../../src/reducers/web3.js"],"names":["initialState","account","networkId","provider","ready","errors","sagas","ACTIONS","GET_WEB3","getWeb3Saga","_test","actions","getWeb3Action","getWeb3FailureAction","getWeb3SuccessAction","getClearErrorsAction","watchGetWeb3","reducer","state","action","type","GET_WEB3_SUCCESS","GET_WEB3_FAILURE","concat","error","CLEAR_ERRORS","window","ethereum","isMetaMask","selectedAddress","networkVersion","console","warn","Error","length"],"mappings":"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","sourcesContent":["\n// package imports\n\nimport { put, takeLatest } from 'redux-saga/effects'\n\n// local imports\n\nimport { web3 as ACTIONS } from '../actions'\n\nconst initialState = {\n  account: null, // current selected account from injected web3 object\n  networkId: null, // current selected network id from injected web3 object\n  provider: null, // current provider from injected web3 object\n  ready: false, // false on start or if any thunks have yet to return, true o.w.\n  errors: [], // storage for web3 errors\n}\n\nconst sagas = [\n  takeLatest(ACTIONS.GET_WEB3, getWeb3Saga),\n]\n\nconst _test = {\n  actions: {\n    getWeb3Action,\n    getWeb3FailureAction,\n    getWeb3SuccessAction,\n    getClearErrorsAction,\n  },\n  sagas: {\n    getWeb3Saga,\n    watchGetWeb3,\n  },\n}\n\nexport {\n  getWeb3Action as getWeb3,\n  getClearErrorsAction as clearErrors,\n  initialState,\n  sagas,\n  _test,\n}\n\nexport default function reducer (state = initialState, action) {\n\n  switch (action.type) {\n\n    case ACTIONS.GET_WEB3:\n      return {\n        ...initialState,\n      }\n\n    case ACTIONS.GET_WEB3_SUCCESS:\n      return {\n        ...state,\n        ready: true,\n        provider: action.provider,\n        account: action.account,\n        networkId: action.networkId,\n      }\n\n    case ACTIONS.GET_WEB3_FAILURE:\n      return {\n        ...state,\n        errors: state.errors.concat(action.error),\n      }\n\n    case ACTIONS.CLEAR_ERRORS:\n      return {\n        ...state,\n        errors: [],\n      }\n\n    default:\n      return state\n  }\n}\n\n/**\n * Synchronous action creators\n */\n\n/**\n * Gets web3, adds it to state.\n */\nfunction getWeb3Action () {\n  return {\n    type: ACTIONS.GET_WEB3,\n  }\n}\n\n/**\n * On getWeb3 success, adds provider, account, and networkId to state.\n * @param {object} provider\n * @param {string} account\n * @param {string} networkId\n */\nfunction getWeb3SuccessAction (provider, account, networkId) {\n  return {\n    type: ACTIONS.GET_WEB3_SUCCESS,\n    provider,\n    account,\n    networkId,\n  }\n}\n\n/**\n * On getWeb3 failure, adds error to state.\n * @param {error} error\n */\nfunction getWeb3FailureAction (error) {\n  return {\n    type: ACTIONS.GET_WEB3_FAILURE,\n    error,\n  }\n}\n\n/**\n * Clears errors from state.\n */\nfunction getClearErrorsAction () {\n  return {\n    type: ACTIONS.CLEAR_ERRORS,\n  }\n}\n\n/**\n * Sagas\n */\n\n/**\n * Watcher for getWeb3Saga.\n */\nfunction * watchGetWeb3 () {\n  yield takeLatest(ACTIONS.GET_WEB3, getWeb3Saga)\n}\n\n/**\n * Saga. Gets the injected web3 object. Assumes window.ethereum.enable()\n * already called. Does not support legacy dapp browsers.\n *\n * TODO: Add support for other EIP1102-compliant dapp browsers.\n */\nfunction * getWeb3Saga () {\n\n  let provider, account, networkId\n\n  // attempt to get ethereum object injected by MetaMask\n  // TODO: let other dapp browsers through, but add a warning in the UI\n  if (window.ethereum && window.ethereum.isMetaMask) {\n\n    try {\n      // Request account access if needed\n      provider = window.ethereum\n      account = window.ethereum.selectedAddress\n      networkId = window.ethereum.networkVersion\n    } catch (error) {\n      // User denied access\n      yield put(getWeb3FailureAction(error))\n    }\n  } else {\n    console.warn('Please install MetaMask.')\n    yield put(getWeb3FailureAction(new Error('window.ethereum not found.')))\n  }\n\n  // fail if account invalid\n  if (!account || account.length < 1 || !networkId) {\n    yield put(getWeb3FailureAction(new Error(\n      'Missing or invalid account or network id.', account)))\n  } else {\n    yield put(getWeb3SuccessAction(provider, account, networkId))\n  }\n}\n"],"file":"web3.js"}