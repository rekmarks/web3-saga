{"version":3,"sources":["../../src/reducers/contracts.js"],"names":["watchDeploySaga","deploySaga","initialState","types","Object","values","defaultContracts","reduce","acc","c","id","bytecode","NAMESPACE","name","contractName","artifact","errors","isDeploying","instances","sagas","ACTIONS","BEGIN_DEPLOYMENT","_test","actions","getClearErrorsAction","getBeginDeploymentAction","getDeploymentFailureAction","getDeploymentSuccessAction","fn","deployContract","prepareForDeployment","reducer","state","action","type","END_DEPLOYMENT","DEPLOYMENT_SUCCESS","data","DEPLOYMENT_FAILURE","concat","error","CLEAR_ERRORS","contractId","constructorParams","selectors","web3","contracts","ready","result","Error","provider","account","contractTypes","arrayParams","Array","isArray","keys","sort","a","b","paramOrder","map","key","value","instance","address","networkId"],"mappings":"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","sourcesContent":["\n// package imports\n\nimport { put, takeLeading, call, select } from 'redux-saga/effects'\n\nimport uuidv4 from 'uuid/v4'\nimport uuidv5 from 'uuid/v5'\n\nimport {\n  contracts as defaultContracts, // all default contracts come from chain-end\n  deploy as _deploy,\n  // v2.0\n  // getInstance,\n  // callInstance,\n} from 'chain-end'\n\n// local imports\n\nimport { contracts as ACTIONS } from '../actions'\n\nimport selectors from '../selectors'\n\n// contract type uuids are created using the contract bytecode (see call below)\n// think of the resulting uuid as a hash of the contract artifact to help\n// prevent the addition of duplicate contracts\nimport { NAMESPACE } from '../utils'\n\n// import { getDisplayAddress } from '../utils' // eth address truncation\n\nconst initialState = {\n\n  types: Object.values(defaultContracts).reduce((acc, c) => {\n    const id = uuidv5(c.bytecode, NAMESPACE)\n    acc[id] = {\n      id: id,\n      name: c.contractName,\n      artifact: c, // Truffle compilation output\n    }\n    return acc\n  }, {}),\n\n  // error storage\n  errors: [],\n\n  // prevents further web3 calls if false\n  isDeploying: false,\n\n  // deployed contract instances\n  instances: {\n    // id: {\n    //   id,\n    //   truffleContract,\n    //   address,\n    //   account,\n    //   type,\n    //   constructorParams,\n    //   networkId,\n    //   dappTemplateIds,\n    //   templateNodeId,\n    // }\n  },\n\n  // v2.0\n  // // contract instance call storage\n  // callHistory: [],\n\n  // v3.0\n  // // used when deploying dapps\n  // deploymentQueue: null,\n}\n\nconst sagas = [\n takeLeading(ACTIONS.BEGIN_DEPLOYMENT, deploySaga),\n]\n\nconst _test = {\n  actions: {\n    getClearErrorsAction,\n    getBeginDeploymentAction,\n    getDeploymentFailureAction,\n    getDeploymentSuccessAction,\n  },\n  sagas: {\n    deploySaga,\n    watchDeploySaga,\n  },\n  fn: {\n    deployContract,\n    prepareForDeployment,\n  },\n}\n\nexport {\n  getBeginDeploymentAction as deployContract,\n  getClearErrorsAction as clearErrors,\n  initialState,\n  sagas,\n  _test,\n}\n\nexport default function reducer (state = initialState, action) {\n\n  switch (action.type) {\n\n    case ACTIONS.BEGIN_DEPLOYMENT:\n      return {\n        ...state,\n        isDeploying: true,\n      }\n\n    case ACTIONS.END_DEPLOYMENT:\n      return {\n        ...state,\n        isDeploying: false,\n      }\n\n    case ACTIONS.DEPLOYMENT_SUCCESS:\n\n      return {\n        ...state,\n\n        instances: {\n          ...state.instances,\n\n          [action.id]: {\n            ...action.data,\n            id: action.id,\n            // dappTemplateIds: action.data.dappTemplateIds || [],\n          },\n        },\n        isDeploying: false,\n      }\n\n    case ACTIONS.DEPLOYMENT_FAILURE:\n      return {\n        ...state,\n        errors: state.errors.concat(action.error),\n        isDeploying: false,\n      }\n\n    case ACTIONS.CLEAR_ERRORS:\n      return {\n        ...state,\n        errors: [],\n      }\n\n    default:\n      return state\n  }\n}\n\n/**\n * Synchronous action creators\n */\n\n/**\n * Initializes contract deployment.\n * @param {string} contractId the uuid of the contract to deploy\n * @param {array} constructorParams the parameters, in the order they must be\n * passed to the constructor, or an object\n */\nfunction getBeginDeploymentAction (contractId, constructorParams) {\n  return {\n    type: ACTIONS.BEGIN_DEPLOYMENT,\n    contractId,\n    constructorParams,\n  }\n}\n\nfunction getDeploymentSuccessAction (id, data) {\n  return {\n    type: ACTIONS.DEPLOYMENT_SUCCESS,\n    id,\n    data,\n  }\n}\n\nfunction getDeploymentFailureAction (error) {\n  return {\n    type: ACTIONS.DEPLOYMENT_FAILURE,\n    error,\n  }\n}\n\nfunction getClearErrorsAction () {\n  return {\n    type: ACTIONS.CLEAR_ERRORS,\n  }\n}\n\n/**\n * Sagas\n */\n\n/**\n * Watcher for deploySaga.\n */\nfunction * watchDeploySaga () {\n  yield takeLeading(ACTIONS.BEGIN_DEPLOYMENT, deploySaga)\n}\n\n/**\n * Attempts to deploy the given contract by calling its constructor with the\n * given parameters. Handles success and failure.\n * @param {object} action the action initializing the deployment procedure\n */\nfunction * deploySaga (action) {\n\n  // get necessary substate\n  const web3 = yield select(selectors.web3)\n  const contracts = yield select(selectors.contracts)\n\n  let ready = false\n  try { ready = prepareForDeployment(web3) } catch (error) {\n    yield put(getDeploymentFailureAction(error))\n  }\n\n  if (ready) {\n    try {\n      const result = yield call(\n        deployContract,\n        web3,\n        contracts.types,\n        action.contractId,\n        action.constructorParams\n      )\n      yield put(getDeploymentSuccessAction(uuidv4(), result))\n    } catch (error) {\n      yield put(getDeploymentFailureAction(error))\n    }\n  }\n}\n\n/**\n * Internal helpers\n */\n\n/**\n * Validates pre-deployment state. Throws error if validation fails.\n * Returns true otherwise.\n *\n * @param {object} web3 redux web3 substate\n * @return {bool} true if validation successful, else throws\n */\nfunction prepareForDeployment (web3) {\n\n  if (!web3.ready) {\n    throw new Error('Reducer \"web3\" not ready.')\n  }\n  if (!web3.provider) {\n    throw new Error('Missing web3 provider.')\n  }\n  if (!web3.account) {\n    throw new Error('Missing web3 account.')\n  }\n  return true\n}\n\n/**\n * Helper performing actual deployment work.\n * Validates that the contract's artifact exists and that the web3 call is\n * successful.\n *\n * @param {object} web3 redux web3 substate\n * @param {object} contractTypes contract types from state\n * @param {string} contractId name of contract to deploy\n * @param {array} constructorParams constructor parameters\n * @return {object} deployment data if successful, throws otherwise\n */\nasync function deployContract (\n    web3,\n    contractTypes,\n    contractId,\n    constructorParams,\n  ) {\n\n  // validation\n  if (!contractTypes[contractId]) {\n    throw new Error('No contract with id \"' + contractId + '\" found.')\n  }\n\n  // TODO: actually expect only arrays for this argument\n  // and move this conversion higher up the call chain\n  // (do form an object as below in the React component)\n  let arrayParams = []\n  if (!Array.isArray(constructorParams)) {\n    // convert object of params with data to array of param values\n    arrayParams = Object.keys(constructorParams)\n      .sort((a, b) => {\n        return constructorParams[a].paramOrder -\n               constructorParams[b].paramOrder\n      })\n      .map(key => constructorParams[key].value)\n  } else {\n    arrayParams = constructorParams\n  }\n\n  const artifact = contractTypes[contractId].artifact\n\n  // actual web3 call happens in here\n  // this may throw and that's fine\n  const instance = await _deploy(\n    artifact,\n    arrayParams,\n    web3.provider,\n    web3.account\n  )\n\n  // success, return deployment data\n  return {\n    instance: instance,\n    address: instance.address,\n    account: web3.account,\n    type: artifact.contractName,\n    constructorParams: constructorParams,\n    networkId: web3.networkId,\n  }\n}\n"],"file":"contracts.js"}