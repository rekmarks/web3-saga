{"version":3,"sources":["../../src/reducers/web3.js"],"names":["watchGetWeb3","getWeb3Saga","initialState","account","networkId","provider","ready","errors","sagas","ACTIONS","GET_WEB3","_test","actions","getWeb3Action","getWeb3FailureAction","getWeb3SuccessAction","getClearErrorsAction","reducer","state","action","type","GET_WEB3_SUCCESS","GET_WEB3_FAILURE","concat","error","CLEAR_ERRORS","window","ethereum","isMetaMask","selectedAddress","networkVersion","console","warn","Error","length"],"mappings":"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","sourcesContent":["\n// package imports\n\nimport { put, takeLatest } from 'redux-saga/effects'\n\n// local imports\n\nimport { web3 as ACTIONS } from '../actions'\n\nconst initialState = {\n  account: null, // current selected account from injected web3 object\n  networkId: null, // current selected network id from injected web3 object\n  provider: null, // current provider from injected web3 object\n  ready: false, // false on start or if any thunks have yet to return, true o.w.\n  errors: [], // storage for web3 errors\n}\n\nconst sagas = [\n  takeLatest(ACTIONS.GET_WEB3, getWeb3Saga),\n]\n\nconst _test = {\n  actions: {\n    getWeb3Action,\n    getWeb3FailureAction,\n    getWeb3SuccessAction,\n    getClearErrorsAction,\n  },\n  sagas: {\n    getWeb3Saga,\n    watchGetWeb3,\n  },\n}\n\nexport {\n  getWeb3Action as getWeb3,\n  getClearErrorsAction as clearErrors,\n  initialState,\n  sagas,\n  _test,\n}\n\nexport function reducer (state = initialState, action) {\n\n  switch (action.type) {\n\n    case ACTIONS.GET_WEB3:\n      return {\n        ...initialState,\n      }\n\n    case ACTIONS.GET_WEB3_SUCCESS:\n      return {\n        ...state,\n        ready: true,\n        provider: action.provider,\n        account: action.account,\n        networkId: action.networkId,\n      }\n\n    case ACTIONS.GET_WEB3_FAILURE:\n      return {\n        ...state,\n        errors: state.errors.concat(action.error),\n      }\n\n    case ACTIONS.CLEAR_ERRORS:\n      return {\n        ...state,\n        errors: [],\n      }\n\n    default:\n      return state\n  }\n}\n\n/**\n * Synchronous action creators\n */\n\n/**\n * Gets web3, adds it to state.\n */\nfunction getWeb3Action () {\n  return {\n    type: ACTIONS.GET_WEB3,\n  }\n}\n\n/**\n * On getWeb3 success, adds provider, account, and networkId to state.\n * @param {object} provider\n * @param {string} account\n * @param {string} networkId\n */\nfunction getWeb3SuccessAction (provider, account, networkId) {\n  return {\n    type: ACTIONS.GET_WEB3_SUCCESS,\n    provider,\n    account,\n    networkId,\n  }\n}\n\n/**\n * On getWeb3 failure, adds error to state.\n * @param {error} error\n */\nfunction getWeb3FailureAction (error) {\n  return {\n    type: ACTIONS.GET_WEB3_FAILURE,\n    error,\n  }\n}\n\n/**\n * Clears errors from state.\n */\nfunction getClearErrorsAction () {\n  return {\n    type: ACTIONS.CLEAR_ERRORS,\n  }\n}\n\n/**\n * Sagas\n */\n\n/**\n * Watcher for getWeb3Saga.\n */\nfunction * watchGetWeb3 () {\n  yield takeLatest(ACTIONS.GET_WEB3, getWeb3Saga)\n}\n\n/**\n * Saga. Gets the injected web3 object. Assumes window.ethereum.enable()\n * already called. Does not support legacy dapp browsers.\n *\n * TODO: Add support for other EIP1102-compliant dapp browsers.\n */\nfunction * getWeb3Saga () {\n\n  let provider, account, networkId\n\n  // attempt to get ethereum object injected by MetaMask\n  // TODO: let other dapp browsers through, but add a warning in the UI\n  if (window.ethereum && window.ethereum.isMetaMask) {\n\n    try {\n      // Request account access if needed\n      provider = window.ethereum\n      account = window.ethereum.selectedAddress\n      networkId = window.ethereum.networkVersion\n    } catch (error) {\n      // User denied access\n      yield put(getWeb3FailureAction(error))\n    }\n  } else {\n    console.warn('Please install MetaMask.')\n    yield put(getWeb3FailureAction(new Error('window.ethereum not found.')))\n  }\n\n  // fail if account invalid\n  if (!account || account.length < 1 || !networkId) {\n    yield put(getWeb3FailureAction(new Error(\n      'Missing or invalid account or network id.', account)))\n  } else {\n    yield put(getWeb3SuccessAction(provider, account, networkId))\n  }\n}\n"],"file":"web3.js"}